/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.41
 * Generated at: 2019-11-17 13:35:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.net.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/footer.jsp", Long.valueOf(1573993096058L));
    _jspx_dependants.put("/header.jsp", Long.valueOf(1573993096060L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.net");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>JSP 제이에스피</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/mainLayout.css\">\r\n");
      out.write("<script>\r\n");
      out.write("function popupNotice() {\r\n");
      out.write("\twindow.open('popup.jsp', 'popup', 'width=240, height=290, top=210, left=320');\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("function openLogin() {\t// 로그인 팝업창\r\n");
      out.write("\twindow.open('/myweb/member/login.jsp', 'login', 'width=400, height=200, top=200, left=700');\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("<header>\r\n");
      out.write("<div>\r\n");

// 로그인시 세션생성과 함께 저장된 이름 받아오기
String userName = (String) session.getAttribute("login_name");
// 로그인 session 확인
if (userName == null) {	// session x

      out.write("\r\n");
      out.write("\t<!-- a태그에 js함수 사용 가능 -->\r\n");
      out.write("\t<a href=\"javascript:openLogin()\">로그인</a>|\r\n");
      out.write("\t<a href=\"/myweb/member/memberJoin.jsp\">회원가입</a>\r\n");

} else {	// session o

      out.write('\r');
      out.write('\n');
      out.write('	');
      out.print( userName );
      out.write("님 로그인 중|\r\n");
      out.write("\t<a href=\"/myweb/member/logout_ok.jsp\">로그아웃</a>\r\n");

}

      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("<h1>JSP Study Site</h1>\r\n");
      out.write("<nav>\r\n");
      out.write("\t<ul>\r\n");
      out.write("\t\t<!-- 절대경로: /프로젝트명(최상위경로)/index.jsp -->\r\n");
      out.write("\t\t<li><a href=\"/myweb/index.jsp\">Home</a></li>\r\n");
      out.write("\t\t<li><a href=\"#\">Profile</a></li>\r\n");
      out.write("\t\t<li><a href=\"/myweb/wf/webFolder.jsp\">WebFolder</a></li>\r\n");
      out.write("\t\t<li><a href=\"/myweb/bbs/bbsList.jsp\">BBS</a></li>\r\n");
      out.write("\t\t<li><a href=\"/myweb/guestbook/guestBook.jsp\">GuestBook</a></li>\r\n");
      out.write("\t</ul>\r\n");
      out.write("</nav>\r\n");
      out.write("<hr>\r\n");
      out.write("</header>");
      out.write("\r\n");
      out.write("<section>\r\n");
      out.write("<article id=\"mainImg\">\t<!-- 블록 태그 속성 -->\r\n");
      out.write("<img src=\"IMG/main.gif\" alt=\"메인이미지\">\r\n");
      out.write("</article>\r\n");
      out.write("<article id=\"mainMenu\">\r\n");
      out.write("<h2>&nbsp;&nbsp;안녕하세요. ㅎㅇㅎㅇ?</h2>\r\n");

// 쿠키 불러오기 - 방문일: 기존 저장된 정보를 불러오기위해 저장보다 먼저 실행되게 위에
Cookie[] cks = request.getCookies();	// 1. 쿠키'들'을 가져오기 
String lastDate = "&nbsp;&nbsp;&nbsp;&nbsp;처음 오셨네요.";
if (cks != null) {
	for (int i = 0; i < cks.length; i++) {
		// 2. 원하는 key 찾기: lastDate key 검색, 있으면 메세지 변경
		if (cks[i].getName().equals("lastDate")) {
			lastDate = "&nbsp;&nbsp;&nbsp;&nbsp;최근방문일: "
					+ URLDecoder.decode(cks[i].getValue());	// 3. value 추출
		}
	}
}

// 쿠키 불러오기 - 공지팝업창
boolean cookie_check = true;
if (cks != null) {
	for (int i = 0; i < cks.length; i++) {
		// 2. 원하는 key 찾기: notice key 검색,있으면 false
		if (cks[i].getName().equals("notice")) {
			cookie_check = false;
		}
	}
}
if (cookie_check) {	// 3. 값 활용: notice 쿠키 유무에 따라 실행여부 판단

      out.write("\r\n");
      out.write("\t<script>\r\n");
      out.write("\tpopupNotice();\r\n");
      out.write("\t</script>\t\r\n");

}

      out.write("\r\n");
      out.write("<h4>");
      out.print( lastDate );
      out.write("</h4>\r\n");

// 오늘 날짜 구하기
Calendar cal = Calendar.getInstance();
String year = Integer.toString(cal.get(cal.YEAR));
String month = Integer.toString(cal.get(cal.MONTH) + 1);
String day = Integer.toString(cal.get(cal.DATE));
String date = year + "년 " + month + "월 " + day + "일";
date = URLEncoder.encode(date);

// 쿠키 저장하기 - 방문일
Cookie ck = new Cookie("lastDate", date);	// 1. 쿠키 객체 생성
ck.setMaxAge(60 * 60 * 24 * 30);			// 2. 쿠키 나이 지정 (초)
response.addCookie(ck);						// 3. 브라우저(클라이언트)에 추가

      out.write("\r\n");
      out.write("<ul>\r\n");
      out.write("\t<li>수업메뉴가 아래에 계속 추가됨</li>\r\n");
      out.write("\t<li><a href=\"paramTest.jsp\">파라미터 테스트</a></li>\r\n");
      out.write("\t<li><a href=\"cal.jsp\">사칙계산기</a></li>\r\n");
      out.write("\t<li><a href=\"emp.jsp\">사원관리 프로그램 (model1)</a></li>\r\n");
      out.write("\t<li><a href=\"beanTest.jsp\">빈테스트</a></li>\r\n");
      out.write("\t<li><a href=\"emp2.jsp\">사원관리 프로그램 (Beans 적용)</a></li>\r\n");
      out.write("\t<li><a href=\"member/memberFind.jsp\">회원검색</a></li>\r\n");
      out.write("</ul>\r\n");
      out.write("</article>\r\n");
      out.write("</section>\r\n");
      out.write("\r\n");
      out.write("<footer>\r\n");
      out.write("\t<hr>\r\n");
      out.write("\t<div>Copyright &copy; LIsto. All Rights Reserved.</div>\r\n");
      out.write("</footer>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
